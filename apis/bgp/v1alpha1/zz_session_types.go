/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SessionObservation struct {
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SessionParameters struct {

	// ipv4 or ipv6
	// +kubebuilder:validation:Required
	AddressFamily *string `json:"addressFamily" tf:"address_family,omitempty"`

	// Boolean flag to set the default route policy. False by default
	// +kubebuilder:validation:Optional
	DefaultRoute *bool `json:"defaultRoute,omitempty" tf:"default_route,omitempty"`

	// ID of device
	// +kubebuilder:validation:Required
	DeviceID *string `json:"deviceId" tf:"device_id,omitempty"`
}

// SessionSpec defines the desired state of Session
type SessionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SessionParameters `json:"forProvider"`
}

// SessionStatus defines the observed state of Session.
type SessionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SessionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Session is the Schema for the Sessions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixmetaljet}
type Session struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SessionSpec   `json:"spec"`
	Status            SessionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SessionList contains a list of Sessions
type SessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Session `json:"items"`
}

// Repository type metadata.
var (
	Session_Kind             = "Session"
	Session_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Session_Kind}.String()
	Session_KindAPIVersion   = Session_Kind + "." + CRDGroupVersion.String()
	Session_GroupVersionKind = CRDGroupVersion.WithKind(Session_Kind)
)

func init() {
	SchemeBuilder.Register(&Session{}, &SessionList{})
}
