/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkTypeObservation struct {
}

type NetworkTypeParameters struct {

	// The ID of the device on which the network type should be set
	// +kubebuilder:validation:Required
	DeviceID *string `json:"deviceId" tf:"device_id,omitempty"`

	// Network type to set. Must be one of layer3, hybrid, hybrid-bonded, layer2-individual, layer2-bonded
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// NetworkTypeSpec defines the desired state of NetworkType
type NetworkTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkTypeParameters `json:"forProvider"`
}

// NetworkTypeStatus defines the observed state of NetworkType.
type NetworkTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkType is the Schema for the NetworkTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixmetaljet}
type NetworkType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkTypeSpec   `json:"spec"`
	Status            NetworkTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkTypeList contains a list of NetworkTypes
type NetworkTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkType `json:"items"`
}

// Repository type metadata.
var (
	NetworkType_Kind             = "NetworkType"
	NetworkType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkType_Kind}.String()
	NetworkType_KindAPIVersion   = NetworkType_Kind + "." + CRDGroupVersion.String()
	NetworkType_GroupVersionKind = CRDGroupVersion.WithKind(NetworkType_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkType{}, &NetworkTypeList{})
}
