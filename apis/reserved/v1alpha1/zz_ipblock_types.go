/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpBlockObservation struct {
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	AddressFamily *int64 `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	Cidr *int64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	CidrNotation *string `json:"cidrNotation,omitempty" tf:"cidr_notation,omitempty"`

	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	Manageable *bool `json:"manageable,omitempty" tf:"manageable,omitempty"`

	Management *bool `json:"management,omitempty" tf:"management,omitempty"`

	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type IpBlockParameters struct {

	// Arbitrary description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with metro
	// +kubebuilder:validation:Optional
	Facility *string `json:"facility,omitempty" tf:"facility,omitempty"`

	// Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for type==global_ipv4, conflicts with facility
	// +kubebuilder:validation:Optional
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// The metal project ID where to allocate the address block
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// The number of allocated /32 addresses, a power of 2
	// +kubebuilder:validation:Required
	Quantity *int64 `json:"quantity" tf:"quantity,omitempty"`

	// Tags attached to the reserved block
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Either global_ipv4 or public_ipv4, defaults to public_ipv4 for backward compatibility
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// IpBlockSpec defines the desired state of IpBlock
type IpBlockSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpBlockParameters `json:"forProvider"`
}

// IpBlockStatus defines the observed state of IpBlock.
type IpBlockStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpBlockObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpBlock is the Schema for the IpBlocks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixmetaljet}
type IpBlock struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpBlockSpec   `json:"spec"`
	Status            IpBlockStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpBlockList contains a list of IpBlocks
type IpBlockList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpBlock `json:"items"`
}

// Repository type metadata.
var (
	IpBlock_Kind             = "IpBlock"
	IpBlock_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpBlock_Kind}.String()
	IpBlock_KindAPIVersion   = IpBlock_Kind + "." + CRDGroupVersion.String()
	IpBlock_GroupVersionKind = CRDGroupVersion.WithKind(IpBlock_Kind)
)

func init() {
	SchemeBuilder.Register(&IpBlock{}, &IpBlockList{})
}
