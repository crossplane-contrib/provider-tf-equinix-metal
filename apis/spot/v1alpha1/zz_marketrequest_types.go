/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceParametersObservation struct {
	TermintationTime *string `json:"termintationTime,omitempty" tf:"termintation_time,omitempty"`
}

type InstanceParametersParameters struct {

	// +kubebuilder:validation:Optional
	AlwaysPxe *bool `json:"alwaysPxe,omitempty" tf:"always_pxe,omitempty"`

	// +kubebuilder:validation:Required
	BillingCycle *string `json:"billingCycle" tf:"billing_cycle,omitempty"`

	// +kubebuilder:validation:Optional
	Customdata *string `json:"customdata,omitempty" tf:"customdata,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Features []*string `json:"features,omitempty" tf:"features,omitempty"`

	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Optional
	IpxeScriptURL *string `json:"ipxeScriptUrl,omitempty" tf:"ipxe_script_url,omitempty"`

	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// +kubebuilder:validation:Required
	OperatingSystem *string `json:"operatingSystem" tf:"operating_system,omitempty"`

	// +kubebuilder:validation:Required
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectSSHKeys []*string `json:"projectSshKeys,omitempty" tf:"project_ssh_keys,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UserSSHKeys []*string `json:"userSshKeys,omitempty" tf:"user_ssh_keys,omitempty"`

	// +kubebuilder:validation:Optional
	Userdata *string `json:"userdata,omitempty" tf:"userdata,omitempty"`
}

type MarketRequestObservation struct {
}

type MarketRequestParameters struct {

	// Maximum number devices to be created
	// +kubebuilder:validation:Required
	DevicesMax *int64 `json:"devicesMax" tf:"devices_max,omitempty"`

	// Miniumum number devices to be created
	// +kubebuilder:validation:Required
	DevicesMin *int64 `json:"devicesMin" tf:"devices_min,omitempty"`

	// Facility IDs where devices should be created
	// +kubebuilder:validation:Optional
	Facilities []*string `json:"facilities,omitempty" tf:"facilities,omitempty"`

	// Parameters for devices provisioned from this request. You can find the parameter description from the [metal_device doc](device.md)
	// +kubebuilder:validation:Required
	InstanceParameters []InstanceParametersParameters `json:"instanceParameters" tf:"instance_parameters,omitempty"`

	// Maximum price user is willing to pay per hour per device
	// +kubebuilder:validation:Required
	MaxBidPrice *float64 `json:"maxBidPrice" tf:"max_bid_price,omitempty"`

	// Metro where devices should be created
	// +kubebuilder:validation:Optional
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// Project ID
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// On resource creation - wait until all desired devices are active, on resource destruction - wait until devices are removed
	// +kubebuilder:validation:Optional
	WaitForDevices *bool `json:"waitForDevices,omitempty" tf:"wait_for_devices,omitempty"`
}

// MarketRequestSpec defines the desired state of MarketRequest
type MarketRequestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MarketRequestParameters `json:"forProvider"`
}

// MarketRequestStatus defines the observed state of MarketRequest.
type MarketRequestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MarketRequestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MarketRequest is the Schema for the MarketRequests API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixmetaljet}
type MarketRequest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MarketRequestSpec   `json:"spec"`
	Status            MarketRequestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MarketRequestList contains a list of MarketRequests
type MarketRequestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MarketRequest `json:"items"`
}

// Repository type metadata.
var (
	MarketRequest_Kind             = "MarketRequest"
	MarketRequest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MarketRequest_Kind}.String()
	MarketRequest_KindAPIVersion   = MarketRequest_Kind + "." + CRDGroupVersion.String()
	MarketRequest_GroupVersionKind = CRDGroupVersion.WithKind(MarketRequest_Kind)
)

func init() {
	SchemeBuilder.Register(&MarketRequest{}, &MarketRequestList{})
}
