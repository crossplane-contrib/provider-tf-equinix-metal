/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CircuitObservation struct {
	NniVnid *int64 `json:"nniVnid,omitempty" tf:"nni_vnid,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Vnid *int64 `json:"vnid,omitempty" tf:"vnid,omitempty"`
}

type CircuitParameters struct {

	// UUID of Connection where the VC is scoped to
	// +kubebuilder:validation:Required
	ConnectionID *string `json:"connectionId" tf:"connection_id,omitempty"`

	// Description of the Virtual Circuit resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the Virtual Circuit resource
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Equinix Metal network-to-network VLAN ID (optional when the connection has mode=tunnel)
	// +kubebuilder:validation:Optional
	NniVlan *int64 `json:"nniVlan,omitempty" tf:"nni_vlan,omitempty"`

	// UUID of the Connection Port where the VC is scoped to
	// +kubebuilder:validation:Required
	PortID *string `json:"portId" tf:"port_id,omitempty"`

	// UUID of the Project where the VC is scoped to
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// Description of the Virtual Circuit speed. This is for information purposes and is computed when the connection type is shared.
	// +kubebuilder:validation:Optional
	Speed *string `json:"speed,omitempty" tf:"speed,omitempty"`

	// Tags attached to the virtual circuit
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// UUID of the VLAN to associate
	// +kubebuilder:validation:Required
	VlanID *string `json:"vlanId" tf:"vlan_id,omitempty"`
}

// CircuitSpec defines the desired state of Circuit
type CircuitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CircuitParameters `json:"forProvider"`
}

// CircuitStatus defines the observed state of Circuit.
type CircuitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CircuitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Circuit is the Schema for the Circuits API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfequinixmetal}
type Circuit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CircuitSpec   `json:"spec"`
	Status            CircuitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CircuitList contains a list of Circuits
type CircuitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Circuit `json:"items"`
}

// Repository type metadata.
var (
	CircuitKind             = "Circuit"
	CircuitGroupKind        = schema.GroupKind{Group: Group, Kind: CircuitKind}.String()
	CircuitKindAPIVersion   = CircuitKind + "." + GroupVersion.String()
	CircuitGroupVersionKind = GroupVersion.WithKind(CircuitKind)
)

func init() {
	SchemeBuilder.Register(&Circuit{}, &CircuitList{})
}
